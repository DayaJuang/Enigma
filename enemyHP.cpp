//=============================================================================
//
// スコア処理 [enemyHP.cpp]
// Author : 
//
//=============================================================================
#include "main.h"
#include "renderer.h"
#include "enemyHP.h"
#include "input.h"
#include "sprite.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define BAR_WIDTH				(750.0f)	// キャラサイズ
#define BAR_HEIGHT				(10.0f)	// 
#define TEXTURE_MAX					(1)		// テクスチャの数


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
static ID3D11Buffer				*g_VertexBuffer = NULL;		// 頂点情報
static ID3D11ShaderResourceView	*g_Texture[TEXTURE_MAX] = { NULL };	// テクスチャ情報

static char *g_TexturName[TEXTURE_MAX] = {
	"data/TEXTURE/enemyHB.png",
};

static int						g_TexNo;					// テクスチャ番号

static BOOL						g_Load = FALSE;

ENEMYHP							g_EnemyHP;					// スコア

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitEnemyHP(void)
{
	ID3D11Device *pDevice = GetDevice();

	//テクスチャ生成
	for (int i = 0; i < TEXTURE_MAX; i++)
	{
		g_Texture[i] = NULL;
		D3DX11CreateShaderResourceViewFromFile(GetDevice(),
			g_TexturName[i],
			NULL,
			NULL,
			&g_Texture[i],
			NULL);
	}

	// 頂点バッファ生成
	D3D11_BUFFER_DESC bd;
	ZeroMemory(&bd, sizeof(bd));
	bd.Usage = D3D11_USAGE_DYNAMIC;
	bd.ByteWidth = sizeof(VERTEX_3D) * 4;
	bd.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	bd.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
	GetDevice()->CreateBuffer(&bd, NULL, &g_VertexBuffer);

	g_EnemyHP.use = FALSE;
	g_EnemyHP.width = BAR_WIDTH;
	g_EnemyHP.height = BAR_HEIGHT;
	g_EnemyHP.position = { SCREEN_CENTER_X, 10.0f, 0.0f };
	g_TexNo = 0;

	g_Load = TRUE;
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitEnemyHP(void)
{
	if (g_Load == FALSE) return;

	if (g_VertexBuffer)
	{
		g_VertexBuffer->Release();
		g_VertexBuffer = NULL;
	}

	for (int i = 0; i < TEXTURE_MAX; i++)
	{
		if (g_Texture[i])
		{
			g_Texture[i]->Release();
			g_Texture[i] = NULL;
		}
	}

	g_Load = FALSE;
}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateEnemyHP(void)
{
	if (g_EnemyHP.width <= 0)
	{
		g_EnemyHP.use = FALSE;
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void DrawEnemyHP(void)
{
	if (g_EnemyHP.use)
	{
		// 頂点バッファ設定
		UINT stride = sizeof(VERTEX_3D);
		UINT offset = 0;
		GetDeviceContext()->IASetVertexBuffers(0, 1, &g_VertexBuffer, &stride, &offset);

		// マトリクス設定
		SetWorldViewProjection2D();

		// プリミティブトポロジ設定
		GetDeviceContext()->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);

		// マテリアル設定
		MATERIAL material;
		ZeroMemory(&material, sizeof(material));
		material.Diffuse = XMFLOAT4(1.0f, 1.0f, 1.0f, 1.0f);
		SetMaterial(material);

		// テクスチャ設定
		GetDeviceContext()->PSSetShaderResources(0, 1, &g_Texture[g_TexNo]);

		// スコアの位置やテクスチャー座標を反映
		float px = g_EnemyHP.position.x;	// エネミーHPの表示位置X
		float py = g_EnemyHP.position.y;	// エネミーHPの表示位置Y
		float pw = g_EnemyHP.width;			// エネミーHPの表示幅
		float ph = g_EnemyHP.height;		// エネミーHPの表示高さ

		float tw = 1.0f;		// テクスチャの幅
		float th = 1.0f;		// テクスチャの高さ
		float tx = 0.0f;		// テクスチャの左上X座標
		float ty = 0.0f;		// テクスチャの左上Y座標

		// １枚のポリゴンの頂点とテクスチャ座標を設定
		SetSpriteColor(g_VertexBuffer, px, py, pw, ph, tx, ty, tw, th,
			XMFLOAT4(1.0f, 1.0f, 1.0f, 0.8f));

		// ポリゴン描画
		GetDeviceContext()->Draw(4, 0);

	}

}

// エネミーHPの設定する
void SetEnemyHP(int enemyHP)
{
	if (g_EnemyHP.use) return;

	g_EnemyHP.use = TRUE;
	g_EnemyHP.width = (float)enemyHP;
}

ENEMYHP * GetEnemyHP(void)
{
	return &g_EnemyHP;
}
